#include "rocc.h"
#include "define.h"
#include <stdio.h>
#define EVAL  1

static inline void accum_write(int idx, uint64_t data)
{
	ROCC_INSTRUCTION_SS(0, data, idx, 0);
}

static inline uint64_t accum_read(int idx)
{
	uint64_t value;
	ROCC_INSTRUCTION_DSS(0, value, 0, idx, 1);
	return value;
}

static inline void accum_load(int idx, void *ptr)
{
	asm volatile ("fence");
	ROCC_INSTRUCTION_SS(0, (uintptr_t) ptr, idx, 2);
}

static inline void accum_add(int idx, uint64_t addend)
{
	ROCC_INSTRUCTION_SS(0, addend, idx, 3);
}
static inline uint64_t add_test(int a, int b)
{
	//asm volatile ("fence");
	uint64_t x;
	ROCC_INSTRUCTION_DSS(0,x, a,b, 4);
	return x;
}

static inline void add_load(int idx, void *ptr)
{
	asm volatile ("fence");
	ROCC_INSTRUCTION_SS(0,idx, (uintptr_t) ptr,  5);
}
uint64_t data = 0x3421L;


int add(int a,int b)
{
	return a + b;
}
int i;

void CFG_init(uint64_t* CFG)
{

CFG[ 0x0] =0x0;
CFG[ 0x1] =0x0;
CFG[ 0x2] =0x0;
CFG[ 0x3] =0x0;
CFG[ 0x4] =0x0;
CFG[ 0x5] =0x0;
CFG[ 0x6] =0x0;
CFG[ 0x7] =0x0;
CFG[ 0x8] =0x0;
CFG[ 0x9] =0x0;
CFG[ 0xa] =0x0;
CFG[ 0xb] =0x0;
CFG[ 0xc] =0x0;
CFG[ 0xd] =0x0;
CFG[ 0xe] =0x8000000000000005L;
CFG[ 0xf] =0x0;
CFG[ 0x10] =0x0;
CFG[ 0x11] =0x0;
CFG[ 0x12] =0x0;
CFG[ 0x13] =0x0;
CFG[ 0x14] =0x0;
CFG[ 0x15] =0x0;
CFG[ 0x16] =0x0;
CFG[ 0x17] =0x0;
CFG[ 0x18] =0x0;
CFG[ 0x19] =0x0;
CFG[ 0x1a] =0x0;
CFG[ 0x1b] =0x0;
CFG[ 0x1c] =0x0;
CFG[ 0x1d] =0x0;
CFG[ 0x1e] =0x0;
CFG[ 0x1f] =0x0;
CFG[ 0x20] =0x8000000000000005L;
CFG[ 0x21] =0x0;
CFG[ 0x22] =0x0;
CFG[ 0x23] =0x0;
CFG[ 0x24] =0x0;
CFG[ 0x25] =0x0;
CFG[ 0x26] =0x0;
CFG[ 0x27] =0x0;
CFG[ 0x28] =0x0;
CFG[ 0x29] =0x0;
CFG[ 0x2a] =0x0;
CFG[ 0x2b] =0x0;
CFG[ 0x2c] =0x0;
CFG[ 0x2d] =0x0;
CFG[ 0x2e] =0x8000000000000005L;
CFG[ 0x2f] =0x0;
CFG[ 0x30] =0x0;
CFG[ 0x31] =0x0;
CFG[ 0x32] =0x0;
CFG[ 0x33] =0x0;
CFG[ 0x34] =0x0;
CFG[ 0x35] =0x0;
CFG[ 0x36] =0x0;
CFG[ 0x37] =0x0;
CFG[ 0x38] =0x0;
CFG[ 0x39] =0x0;
CFG[ 0x3a] =0x0;
CFG[ 0x3b] =0x0;
CFG[ 0x3c] =0x0;
CFG[ 0x3d] =0x0;
CFG[ 0x3e] =0x8000000000000005L;
CFG[ 0x3f] =0x0;
CFG[ 0x40] =0x0;
CFG[ 0x41] =0x0;
CFG[ 0x42] =0x0;
CFG[ 0x43] =0x0;
CFG[ 0x44] =0x0;
CFG[ 0x45] =0x0;
CFG[ 0x46] =0x0;
CFG[ 0x47] =0x0;
CFG[ 0x48] =0x0;
CFG[ 0x49] =0x0;
CFG[ 0x4a] =0x0;
CFG[ 0x4b] =0x0;
CFG[ 0x4c] =0x0;
CFG[ 0x4d] =0x0;
CFG[ 0x4e] =0x0;
CFG[ 0x4f] =0x0;
CFG[ 0x50] =0x0;
CFG[ 0x51] =0x0;
CFG[ 0x52] =0x0;
CFG[ 0x53] =0x0;
CFG[ 0x54] =0x0;
CFG[ 0x55] =0x0;
CFG[ 0x56] =0x8000000100000000L;
CFG[ 0x57] =0x0;
CFG[ 0x58] =0x8000000000000005L;
CFG[ 0x59] =0x0;
CFG[ 0x5a] =0x0;
CFG[ 0x5b] =0x0;
CFG[ 0x5c] =0x0;
CFG[ 0x5d] =0x0;
CFG[ 0x5e] =0x8000000100000001L;
CFG[ 0x5f] =0x0;
CFG[ 0x60] =0x0;
CFG[ 0x61] =0x0;
CFG[ 0x62] =0x0;
CFG[ 0x63] =0x0;
CFG[ 0x64] =0x0;
CFG[ 0x65] =0x0;
CFG[ 0x66] =0x100;
CFG[ 0x67] =0x0;
CFG[ 0x68] =0x0;
CFG[ 0x69] =0x0;
CFG[ 0x6a] =0x0;
CFG[ 0x6b] =0x0;
CFG[ 0x6c] =0x0;
CFG[ 0x6d] =0x0;
CFG[ 0x6e] =0x0;
CFG[ 0x6f] =0x0;
CFG[ 0x70] =0x8000000100000003L;
CFG[ 0x71] =0x0;
CFG[ 0x72] =0x0;
CFG[ 0x73] =0x0;
CFG[ 0x74] =0x0;
CFG[ 0x75] =0x0;
CFG[ 0x76] =0x0;
CFG[ 0x77] =0x0;
CFG[ 0x78] =0x8000000000000005L;
CFG[ 0x79] =0x0;
CFG[ 0x7a] =0x8000000100000004L;
CFG[ 0x7b] =0x0;
CFG[ 0x7c] =0x0;
CFG[ 0x7d] =0x0;
CFG[ 0x7e] =0x0;
CFG[ 0x7f] =0x0;
CFG[ 0x80] =0x0;
CFG[ 0x81] =0x0;
CFG[ 0x82] =0x0;
CFG[ 0x83] =0x0;
CFG[ 0x84] =0x0;
CFG[ 0x85] =0x0;
CFG[ 0x86] =0x0;
CFG[ 0x87] =0x0;
CFG[ 0x88] =0x0;
CFG[ 0x89] =0x0;
CFG[ 0x8a] =0x8000000000000005L;
CFG[ 0x8b] =0x0;
CFG[ 0x8c] =0x0;
CFG[ 0x8d] =0x0;
CFG[ 0x8e] =0x0;
CFG[ 0x8f] =0x0;
CFG[ 0x90] =0x0;
CFG[ 0x91] =0x0;
CFG[ 0x92] =0x0;
CFG[ 0x93] =0x0;
CFG[ 0x94] =0x0;
CFG[ 0x95] =0x0;
CFG[ 0x96] =0x0;
CFG[ 0x97] =0x0;
CFG[ 0x98] =0x0;
CFG[ 0x99] =0x0;
CFG[ 0x9a] =0x8000000000000005L;
CFG[ 0x9b] =0x0;
CFG[ 0x9c] =0x0;
CFG[ 0x9d] =0x0;
CFG[ 0x9e] =0x0;
CFG[ 0x9f] =0x0;
CFG[ 0xa0] =0x0;
CFG[ 0xa1] =0x0;
CFG[ 0xa2] =0x0;
CFG[ 0xa3] =0x0;
CFG[ 0xa4] =0x0;
CFG[ 0xa5] =0x0;
CFG[ 0xa6] =0x0;
CFG[ 0xa7] =0x0;
CFG[ 0xa8] =0x0;
CFG[ 0xa9] =0x0;
CFG[ 0xaa] =0x0;
CFG[ 0xab] =0x0;
CFG[ 0xac] =0x8000000000000005L;
CFG[ 0xad] =0x0;
CFG[ 0xae] =0x0;
CFG[ 0xaf] =0x0;
CFG[ 0xb0] =0x8000000000000005L;
CFG[ 0xb1] =0x0;
CFG[ 0xb2] =0x0;
CFG[ 0xb3] =0x0;
CFG[ 0xb4] =0x0;
CFG[ 0xb5] =0x0;
CFG[ 0xb6] =0x0;
CFG[ 0xb7] =0x0;
CFG[ 0xb8] =0x0;
CFG[ 0xb9] =0x0;
CFG[ 0xba] =0x0;
CFG[ 0xbb] =0x0;
CFG[ 0xbc] =0x8000000000000005L;
CFG[ 0xbd] =0x0;
CFG[ 0xbe] =0x0;
CFG[ 0xbf] =0x0;
CFG[ 0xc0] =0x0;
CFG[ 0xc1] =0x0;
CFG[ 0xc2] =0x0;
CFG[ 0xc3] =0x0;
CFG[ 0xc4] =0x0;
CFG[ 0xc5] =0x0;
CFG[ 0xc6] =0x0;
CFG[ 0xc7] =0x0;
CFG[ 0xc8] =0x0;
CFG[ 0xc9] =0x0;
CFG[ 0xca] =0x0;
CFG[ 0xcb] =0x0;
CFG[ 0xcc] =0x0;
CFG[ 0xcd] =0x0;
CFG[ 0xce] =0x0;
CFG[ 0xcf] =0x0;
CFG[ 0xd0] =0x0;
CFG[ 0xd1] =0x0;
CFG[ 0xd2] =0x0;
CFG[ 0xd3] =0x0;
CFG[ 0xd4] =0x0;
CFG[ 0xd5] =0x0;
CFG[ 0xd6] =0x0;
CFG[ 0xd7] =0x0;
CFG[ 0xd8] =0x0;
CFG[ 0xd9] =0x0;
CFG[ 0xda] =0x0;
CFG[ 0xdb] =0x0;
CFG[ 0xdc] =0x0;
CFG[ 0xdd] =0x0;
CFG[ 0xde] =0x8000000000000005L;
CFG[ 0xdf] =0x0;
CFG[ 0xe0] =0x0;
CFG[ 0xe1] =0x0;
CFG[ 0xe2] =0x0;
CFG[ 0xe3] =0x0;
CFG[ 0xe4] =0x0;
CFG[ 0xe5] =0x0;
CFG[ 0xe6] =0x0;
CFG[ 0xe7] =0x0;
CFG[ 0xe8] =0x0;
CFG[ 0xe9] =0x0;
CFG[ 0xea] =0x0;
CFG[ 0xeb] =0x0;
CFG[ 0xec] =0x0;
CFG[ 0xed] =0x0;
CFG[ 0xee] =0x0;
CFG[ 0xef] =0x0;
CFG[ 0xf0] =0x0;
CFG[ 0xf1] =0x0;
CFG[ 0xf2] =0x0;
CFG[ 0xf3] =0x0;
CFG[ 0xf4] =0x0;
CFG[ 0xf5] =0x0;
CFG[ 0xf6] =0x0;
CFG[ 0xf7] =0x0;
CFG[ 0xf8] =0x0;
CFG[ 0xf9] =0x0;
CFG[ 0xfa] =0x0;
CFG[ 0xfb] =0x0;
CFG[ 0xfc] =0x0;
CFG[ 0xfd] =0x0;
CFG[ 0xfe] =0x0;
CFG[ 0xff] =0x0;
CFG[ 0x100] =0x0;
CFG[ 0x101] =0x0;
CFG[ 0x102] =0x0;
CFG[ 0x103] =0x0;
CFG[ 0x104] =0x0;
CFG[ 0x105] =0x0;
CFG[ 0x106] =0x0;
CFG[ 0x107] =0x0;
CFG[ 0x108] =0x0;
CFG[ 0x109] =0x0;
CFG[ 0x10a] =0x0;
CFG[ 0x10b] =0x0;
CFG[ 0x10c] =0x0;
CFG[ 0x10d] =0x0;
CFG[ 0x10e] =0x0;
CFG[ 0x10f] =0x0;
CFG[ 0x110] =0x0;
CFG[ 0x111] =0x0;
CFG[ 0x112] =0x0;
CFG[ 0x113] =0x0;
CFG[ 0x114] =0x0;
CFG[ 0x115] =0x0;
CFG[ 0x116] =0x0;
CFG[ 0x117] =0x0;
CFG[ 0x118] =0x0;
CFG[ 0x119] =0x0;
CFG[ 0x11a] =0x0;
CFG[ 0x11b] =0x0;
CFG[ 0x11c] =0x0;
CFG[ 0x11d] =0x0;
CFG[ 0x11e] =0x0;
CFG[ 0x11f] =0x0;
CFG[ 0x120] =0x0;
CFG[ 0x121] =0x0;
CFG[ 0x122] =0x0;
CFG[ 0x123] =0x0;
CFG[ 0x124] =0x0;
CFG[ 0x125] =0x0;
CFG[ 0x126] =0x0;
CFG[ 0x127] =0x0;
CFG[ 0x128] =0x0;
CFG[ 0x129] =0x0;
CFG[ 0x12a] =0x0;
CFG[ 0x12b] =0x0;
CFG[ 0x12c] =0x0;
CFG[ 0x12d] =0x0;
CFG[ 0x12e] =0x0;
CFG[ 0x12f] =0x0;
CFG[ 0x130] =0x0;
CFG[ 0x131] =0x0;
CFG[ 0x132] =0x0;
CFG[ 0x133] =0x0;
CFG[ 0x134] =0x0;
CFG[ 0x135] =0x0;
CFG[ 0x136] =0x0;
CFG[ 0x137] =0x0;
CFG[ 0x138] =0x0;
CFG[ 0x139] =0x0;
CFG[ 0x13a] =0x0;
CFG[ 0x13b] =0x0;
CFG[ 0x13c] =0x0;
CFG[ 0x13d] =0x8000000100000002L;
CFG[ 0x13e] =0x0;
CFG[ 0x13f] =0x0;
CFG[ 0x140] =0x0;
CFG[ 0x141] =0x0;
CFG[ 0x142] =0x0;
CFG[ 0x143] =0x0;
CFG[ 0x144] =0x0;
CFG[ 0x145] =0x0;
CFG[ 0x146] =0x0;
CFG[ 0x147] =0x0;
CFG[ 0x148] =0x0;
CFG[ 0x149] =0x0;
CFG[ 0x14a] =0x8000000000000005L;
CFG[ 0x14b] =0x0;
CFG[ 0x14c] =0x0;
CFG[ 0x14d] =0x0;
CFG[ 0x14e] =0x0;
CFG[ 0x14f] =0x0;
CFG[ 0x150] =0x0;
CFG[ 0x151] =0x0;
CFG[ 0x152] =0x0;
CFG[ 0x153] =0x0;
CFG[ 0x154] =0x0;
CFG[ 0x155] =0x0;
CFG[ 0x156] =0x0;
CFG[ 0x157] =0x0;
CFG[ 0x158] =0x0;
CFG[ 0x159] =0x0;
CFG[ 0x15a] =0x0;
CFG[ 0x15b] =0x0;
CFG[ 0x15c] =0x0;
CFG[ 0x15d] =0x0;
CFG[ 0x15e] =0x0;
CFG[ 0x15f] =0x0;
CFG[ 0x160] =0x0;
CFG[ 0x161] =0x0;
CFG[ 0x162] =0x0;
CFG[ 0x163] =0x0;
CFG[ 0x164] =0x0;
CFG[ 0x165] =0x0;
CFG[ 0x166] =0x0;
CFG[ 0x167] =0x0;
CFG[ 0x168] =0x0;
CFG[ 0x169] =0x0;
CFG[ 0x16a] =0x0;
CFG[ 0x16b] =0x0;
CFG[ 0x16c] =0x0;
CFG[ 0x16d] =0x0;
CFG[ 0x16e] =0x0;
CFG[ 0x16f] =0x0;
CFG[ 0x170] =0x0;
CFG[ 0x171] =0x0;
CFG[ 0x172] =0x0;
CFG[ 0x173] =0x0;
CFG[ 0x174] =0x0;
CFG[ 0x175] =0x0;
CFG[ 0x176] =0x0;
CFG[ 0x177] =0x0;
CFG[ 0x178] =0x0;
CFG[ 0x179] =0x0;
CFG[ 0x17a] =0x0;
CFG[ 0x17b] =0x0;
CFG[ 0x17c] =0x0;
CFG[ 0x17d] =0x0;
CFG[ 0x17e] =0x0;
CFG[ 0x17f] =0x0;
CFG[ 0x180] =0x0;
CFG[ 0x181] =0x0;
CFG[ 0x182] =0x0;
CFG[ 0x183] =0x0;
CFG[ 0x184] =0x0;
CFG[ 0x185] =0x0;
CFG[ 0x186] =0x0;
CFG[ 0x187] =0x0;
CFG[ 0x188] =0x0;
CFG[ 0x189] =0x0;
CFG[ 0x18a] =0x0;
CFG[ 0x18b] =0x0;
CFG[ 0x18c] =0x0;
CFG[ 0x18d] =0x0;
CFG[ 0x18e] =0x0;
CFG[ 0x18f] =0x0;
CFG[ 0x190] =0x0;
CFG[ 0x191] =0x0;
CFG[ 0x192] =0x0;
CFG[ 0x193] =0x0;
CFG[ 0x194] =0x0;
CFG[ 0x195] =0x0;
CFG[ 0x196] =0x0;
CFG[ 0x197] =0x0;
CFG[ 0x198] =0x0;
CFG[ 0x199] =0x0;
CFG[ 0x19a] =0x0;
CFG[ 0x19b] =0x0;
CFG[ 0x19c] =0x0;
CFG[ 0x19d] =0x0;
CFG[ 0x19e] =0x0;
CFG[ 0x19f] =0x0;
CFG[ 0x1a0] =0x0;
CFG[ 0x1a1] =0x0;
CFG[ 0x1a2] =0x0;
CFG[ 0x1a3] =0x0;
CFG[ 0x1a4] =0x0;
CFG[ 0x1a5] =0x0;
CFG[ 0x1a6] =0x0;
CFG[ 0x1a7] =0x0;
CFG[ 0x1a8] =0x0;
CFG[ 0x1a9] =0x0;
CFG[ 0x1aa] =0x0;
CFG[ 0x1ab] =0x0;
CFG[ 0x1ac] =0x0;
CFG[ 0x1ad] =0x0;
CFG[ 0x1ae] =0x0;
CFG[ 0x1af] =0x0;
CFG[ 0x1b0] =0x0;
CFG[ 0x1b1] =0x0;
CFG[ 0x1b2] =0x0;
CFG[ 0x1b3] =0x0;
CFG[ 0x1b4] =0x0;
CFG[ 0x1b5] =0x0;
CFG[ 0x1b6] =0x0;
CFG[ 0x1b7] =0x0;
CFG[ 0x1b8] =0x0;
CFG[ 0x1b9] =0x0;
CFG[ 0x1ba] =0x0;
CFG[ 0x1bb] =0x0;
CFG[ 0x1bc] =0x0;
CFG[ 0x1bd] =0x0;
CFG[ 0x1be] =0x0;
CFG[ 0x1bf] =0x0;
CFG[ 0x1c0] =0x0;
CFG[ 0x1c1] =0x0;
CFG[ 0x1c2] =0x0;
CFG[ 0x1c3] =0x0;
CFG[ 0x1c4] =0x0;
CFG[ 0x1c5] =0x0;
CFG[ 0x1c6] =0x0;
CFG[ 0x1c7] =0x0;
CFG[ 0x1c8] =0x0;
CFG[ 0x1c9] =0x0;
CFG[ 0x1ca] =0x0;
CFG[ 0x1cb] =0x0;
CFG[ 0x1cc] =0x0;
CFG[ 0x1cd] =0x0;
CFG[ 0x1ce] =0x0;
CFG[ 0x1cf] =0x0;
CFG[ 0x1d0] =0x0;
CFG[ 0x1d1] =0x0;
CFG[ 0x1d2] =0x0;
CFG[ 0x1d3] =0x0;
CFG[ 0x1d4] =0x0;
CFG[ 0x1d5] =0x0;
CFG[ 0x1d6] =0x0;
CFG[ 0x1d7] =0x0;
CFG[ 0x1d8] =0x0;
CFG[ 0x1d9] =0x0;
CFG[ 0x1da] =0x0;
CFG[ 0x1db] =0x0;
CFG[ 0x1dc] =0x0;
CFG[ 0x1dd] =0x0;
CFG[ 0x1de] =0x0;
CFG[ 0x1df] =0x0;
CFG[ 0x1e0] =0x0;
CFG[ 0x1e1] =0x0;
CFG[ 0x1e2] =0x0;
CFG[ 0x1e3] =0x0;
CFG[ 0x1e4] =0x0;
CFG[ 0x1e5] =0x0;
CFG[ 0x1e6] =0x0;
CFG[ 0x1e7] =0x0;
CFG[ 0x1e8] =0x0;
CFG[ 0x1e9] =0x0;
CFG[ 0x1ea] =0x0;
CFG[ 0x1eb] =0x0;
CFG[ 0x1ec] =0x0;
CFG[ 0x1ed] =0x0;
CFG[ 0x1ee] =0x0;
CFG[ 0x1ef] =0x0;
CFG[ 0x1f0] =0x0;
CFG[ 0x1f1] =0x0;
CFG[ 0x1f2] =0x0;
CFG[ 0x1f3] =0x0;
CFG[ 0x1f4] =0x0;
CFG[ 0x1f5] =0x0;
CFG[ 0x1f6] =0x0;
CFG[ 0x1f7] =0x0;
CFG[ 0x1f8] =0x0;
CFG[ 0x1f9] =0x0;
CFG[ 0x1fa] =0x0;
CFG[ 0x1fb] =0x0;
CFG[ 0x1fc] =0x0;
CFG[ 0x1fd] =0x0;
CFG[ 0x1fe] =0x0;
CFG[ 0x1ff] =0x0;
CFG[ 0x200] =0x80003c20;
CFG[ 0x201] =0x80003c20;
CFG[ 0x202] =0x80003c20;
CFG[ 0x203] =0x80003c20;
CFG[ 0x204] =0x80003c20;

}

void cfi_v1(uint64_t* instruction,uint64_t CFG_ADDR,uint64_t RES_ADDR)
{
instruction[0]=1097 + (CFG_ADDR<< 12);
instruction[1]=1161 + (RES_ADDR<< 12);
instruction[2]=0x2;
instruction[3]=0x55;
instruction[4]=0x409;
instruction[5]=0x40008c18a;
instruction[6]=0x18;
instruction[7]=0xc;
instruction[8]=0x4c;
instruction[9]=0x800000002808000eL;
instruction[10]=0xffffffffff00000fL;
instruction[11]=0x783090;
instruction[12]=0x6c2090;
instruction[13]=0x6c4090;
instruction[14]=0x3012456;
instruction[15]=0xd7;
instruction[16]=0x90000000101000c5L;
instruction[17]=0x541110;
instruction[18]=0x3141814;
instruction[19]=0x18c0150;
instruction[20]=0x181;
instruction[21]=0x10189;
instruction[22]=0x6141814;
instruction[23]=0x181150;
instruction[24]=0x80000000100c00c8L;
instruction[25]=0x3012456;
instruction[26]=0x401;
instruction[27]=0x12;
instruction[28]=0x384090;
instruction[29]=0x181;
instruction[30]=0x1d1;
instruction[31]=0x80000000021c01c6L;
instruction[32]=0x80000000022001c6L;
instruction[33]=0x2249;
instruction[34]=0x91411d4;
instruction[35]=0x18c0150;

}

void Inst_init1(uint64_t* instruction, uint64_t CFG_ADDR)
{
	instruction[0] = WReg + (17<<6) + (CFG_ADDR<< 12); 
	instruction[1] = WReg + (0<<6) + ( 0x7f8 << 12); 
	instruction[2] = WReg + (1<<6) + ( 40 << 12); 
	instruction[3] = WReg + (2<<6) + ( 2 << 12); 
	instruction[4] = WReg + (3<<6) + ( 3 << 12); 
	instruction[5] = WReg + (4<<6) + ( 0xffffffffff << 12); 
	instruction[6] = FIFO_INPUT + (0<<6);
	instruction[7] = WReg + (16<<6) + ( 0 << 12); 
	instruction[8] = DO_UNTIL + (9<<6) + (25<<12) + (7<<18) +(0<<24) + (1<<28);
	instruction[9] = R_FIFO + (5<<6);
	instruction[10] = R_FIFO + (6<<6);
	instruction[11] = RL + (5<<6) + (1<<12) + (7<<18);
	instruction[12] = BIT_ADD + (5<<6) + (4<<12) + (5<<18);
	instruction[13] = IF + (7<<6) + (2<<12) + (19 <<18);
	instruction[14] = IF + (7<<6) + (3<<12) + (21 <<18);
	instruction[15] = BIT_ADD + (5<<6) + (0<<12) + (5<<18);
	instruction[16] = LOAD + (8<<6) + (17<<12) + (5<<18);
	instruction[17] = CMP + (6<<6) + (8<<12) + (16<<18);
	instruction[18] = JUMP + (9<<6);
	instruction[19] = PUSH + (5<<6);
	instruction[20] = JUMP + (9<<6);
	instruction[21] = S_LOAD + (9<<6);
	instruction[22] = IF + (9<<6) + (1<<12) + (9<<18);
	instruction[23] = POP + (10<<6);
	instruction[24] = WReg + (11<<6) + (4<<12);
	// instruction[25] = ADD + (10 <<6)+(11<<12) + (10<<18);
	// instruction[26] = CMP + (6<<6) +(10<<12) + (16<<18);
	// instruction[27] = ADD + (10 <<6)+(11<<12) + (10<<18);
	// instruction[28] = CMP + (6<<6) +(10<<12) + (16<<18);
	instruction[25] = AC + (6<<6) + (6<<12) + (2<<18) + (10<<24) + ((uint64_t)10<<30) + ((uint64_t)11<<36) 
	                    +((uint64_t)16<<42) + ((uint64_t)1<<48) + ((uint64_t)0<<49); 
}


void DFI_Instruction(uint64_t* instruction, uint64_t RDT_ADDR, uint64_t RDS_ADDR){
	instruction[0] = WReg + (17<<6) + (RDS_ADDR<< 12); 
	instruction[1] = WReg + (18<<6) + (RDT_ADDR<< 12); 
	instruction[2] = WReg + (19<<6) + (32<< 12); 
	instruction[3] = WReg + (20<<6) + (2<< 12); 
	instruction[4] = WReg + (21<<6) + (0<< 12); 
	instruction[5] = WReg + (22<<6) + ((uint64_t)(0xffffffff)<< 12); 
	instruction[6] = WReg + (23<<6) + (3<<12); //used to shift the id
	instruction[7] = WReg + (0<<6) + ((uint64_t)(0x1ffffff)<< 12); 
	instruction[8] = WReg + (1<<6) + ((uint64_t)(0xffff)<< 12); 
	instruction[9] = WReg + (2<<6) + (40<< 12); 
	instruction[10] = WReg + (3<<6) + (56<< 12); 
	instruction[11] = FIFO_INPUT + (1<<6);
	instruction[12] = WReg + (16<<6) + (0<< 12); 
	instruction[13] = DO_UNTIL + (14<<6) + (32<<12) + (12<<18) +(0<<24) + (1<<28); 
	instruction[14] = R_FIFO + (4<<6);
    instruction[15] = RL + (4<<6) + (2<<12) + (5<<18);
	instruction[16] = BIT_ADD + (5<<6) + (1<<12) + (5<<18); //reg5 id
	instruction[17] = RL + (4<<6) + (3<<12) + (6<<18); //reg6 rw
	instruction[18] = BIT_ADD + (4<<6) + (0<<12) + (4<<18);//reg4 addr
	instruction[19] = IF + (6<<6) + (0<<12) + (32<<18);  //0 is store
	instruction[20] = SL + (5<<6) + (23<<12) + (5<<18); //reg5 id<<3 to be offset
	instruction[21] = LOAD + (7<<6) + (18<<12) + (4<<18); //reg7 check id
	instruction[22] = LOAD + (8<<6) + (17<<12) + (5<<18);
	instruction[23] = RL + (8 <<6) + (19<<12) + (9<<18); //reg9 rds tail
	instruction[24] = BIT_ADD + (8<<6) + (22<<12) + (8<<18); //reg8 rds head
	instruction[25] = DO_UNTIL + (26<<6) + (29<<12) + (30<<18) +(5<<24) + (1<<28); 
	instruction[26] = LOAD + (10<<6) + (17<<12) + (8<<18) + (2<<24); //reg10  id to be checked 
	instruction[27] = AC + (10<<6) + (10<<12) + (7<<18) + (24<<24) + ((uint64_t)24<<30) + ((uint64_t)24<<36) 
	                    +((uint64_t)16<<42) + ((uint64_t)1<<48) + ((uint64_t)0<<49); ////
	instruction[28] = ADD + (8<<6) + (20<<12) + (8<<18);
	instruction[29] = CMP + (8<<6) + (9<<12) + (21<<18);
	instruction[30] = WReg + (21<<6); 
	instruction[31] = DO_UNTIL + (12<<6) + (32<<12) + (12<<18) +(0<<24) + (1<<28); 
	 //instruction[29] = JUMP + (14<<6);
	instruction[32] = STORE + (5<<6) + (18<<12) + (4<<18);


}

void Mem_test_Instruction(uint64_t* instruction, uint64_t RDT_ADDR, uint64_t RDS_ADDR){
	instruction[0] = WReg + (17<<6) + (RDS_ADDR<< 12); 
	instruction[1] = WReg + (18<<6) + (RDT_ADDR<< 12); 
	instruction[2] = WReg + (5<<6) + (0x8<<12); 
	instruction[3] = WReg + (4<<6) + (100<<12 ); 
	instruction[4] = WReg + (0<<6) + (1<<12 ); 
	instruction[5] = DO_UNTIL + (6<<6) + (10<<12) + (4<<18) +(0<<24) + (0x121d22<<28); 
	instruction[6] = STORE + (4<<6) + (18<<12) + (5<<18);
	instruction[7] = LOAD + (7<<6) + (18<<12) + (5<<18);
	instruction[8] = ADD + (4<<6) + (0<<12) + (4<<18);
	instruction[9] = STORE + (4<<6) + (18<<12) + (5<<18);
	instruction[10] = LOAD + (7<<6) + (18<<12) + (5<<18);
}

void Mem_test_Instruction1(uint64_t* instruction, uint64_t RDT_ADDR, uint64_t RDS_ADDR){
	instruction[0] = WReg + (17<<6) + (RDS_ADDR<< 12); 
	instruction[1] = WReg + (18<<6) + (RDT_ADDR<< 12); 
	instruction[2] = WReg + (5<<6) + (0x3<<12); 
	instruction[3] = WReg + (4<<6) + (100<<12 ); 
	instruction[4] = WReg + (0<<6) + (1<<12 ); 
	instruction[5] = DO_UNTIL + (6<<6) + (10<<12) + (4<<18) +(0<<24) + (0x121d22<<28); 
	instruction[6] = STORE + (4<<6) + (18<<12) + (5<<18) + (3<<24) + (1<<26) + (0<<27);
	instruction[7] = LOAD + (7<<6) + (18<<12) + (5<<18) + (3<<24) + (1<<26) + (0<<27);
	instruction[8] = ADD + (4<<6) + (0<<12) + (4<<18);
	instruction[9] = STORE + (4<<6) + (18<<12) + (5<<18) + (3<<24) + (1<<26) + (0<<27);
	instruction[10] = LOAD + (7<<6) + (18<<12) + (5<<18) + (3<<24) + (1<<26) + (0<<27);
}


void Search_test_Instruction1(uint64_t* instruction, uint64_t CFG_ADDR, uint64_t RES_ADDR){
	for (size_t i = 0; i < 128; i++)
	{
		/* code */
		instruction[i] = 0;
	}
instruction[0]=1097 + (CFG_ADDR<< 12);
instruction[1]=1161 + (RES_ADDR<< 12);
instruction[2]=0x9;
instruction[3]=0x1049;
instruction[4]=0x2089;
instruction[5]=0x30c9;
instruction[6]=0x4109;
instruction[7]=0x5149;
instruction[8]=0x3012456;
instruction[9]=0x197;
instruction[10]=0x3052456;
instruction[11]=0x197;
instruction[12]=0x3092456;
instruction[13]=0x197;
instruction[14]=0x3092456;
instruction[15]=0x197;
instruction[16]=0x3092456;
instruction[17]=0x197;
instruction[18]=0x30d2456;
instruction[19]=0x197;
instruction[20]=0x1112456;
instruction[21]=0x1152456;
instruction[22]=0x55;


}



void DFI_ALL(uint64_t* instruction, uint64_t RDT_ADDR, uint64_t RDS_ADDR){
instruction[0]=1097 + (RDS_ADDR<< 12);
instruction[1]=1161 + (RDT_ADDR<< 12);
instruction[2]=0x42;
instruction[3]=0x1082;
instruction[4]=0x55;
instruction[5]=0x409;
instruction[6]=0x4015101ca;
instruction[7]=0xd80f90;
instruction[8]=0x8e38e38d30b287cc;
instruction[9]=0x80000000123c038e;
instruction[10]=0x800000ffff4c038f;
instruction[11]=0x800000001150038e;
instruction[12]=0x800000000150050f;
instruction[13]=0x800000001054038e;
instruction[14]=0x800000000154054f;
instruction[15]=0x800000000358030f;
instruction[16]=0x800000000230030e;
instruction[17]=0x540590;
instruction[18]=0x8000000001300306;
instruction[19]=0x800000000228028e;
instruction[20]=0x8001fffffc28028f;
instruction[21]=0x80000000010c028d;
instruction[22]=0x80000000000404c6;
instruction[23]=0xc40510;
instruction[24]=0x1c0550;
instruction[25]=0xa803d0;
instruction[26]=0xa813d0;
instruction[27]=0x589;
instruction[28]=0x800000000304004d;
instruction[29]=0x5ca8a478a;
instruction[30]=0x60d2103;
instruction[31]=0xc051143;
instruction[32]=0x800000002018014e;
instruction[33]=0x80ffffffff1c014f;
instruction[34]=0x509c988ca;
instruction[35]=0x161d1203;
instruction[36]=0x14186181ca294;
instruction[37]=0x80000000021c01c6;
instruction[38]=0x507185;
instruction[39]=0x80000000020c00c6;
instruction[40]=0x8000000001580586;
instruction[41]=0x5cc585;
instruction[42]=0x5c9;
instruction[43]=0x589;
instruction[44]=0x5cc8c0b4a;
instruction[45]=0x60d2044;
instruction[46]=0x80000000020c00c6;
instruction[47]=0x8000000001580586;
instruction[48]=0x5cc585;
instruction[49]=0x1309;
instruction[50]=0x800000000234034e;
instruction[51]=0x8001fffffc34034f;
instruction[52]=0x80000000010c034d;
instruction[53]=0x5cd8a478a;
instruction[54]=0xc;
instruction[55]=0x800000002804000e;
instruction[56]=0x800000ffff04004f;
instruction[57]=0x800000003808000e;
instruction[58]=0x8001ffffff0c000f;
instruction[59]=0x80000000020c00ce;
instruction[60]=0x8001ffffff0c00cf;
instruction[61]=0x80000000010c00cd;
instruction[62]=0x10c0090;
instruction[63]=0x800000000304004d;
instruction[64]=0x1309;
instruction[65]=0x5c9;
instruction[66]=0x589;
instruction[67]=0x5c14a478a;
instruction[68]=0x60d2044;



}


/*
void rocc_inst_gen(unsigned long* inst_buffer, unsigned long RDS_ADDR, unsigned long RDT_ADDR){
	FILE *fp;
	fp = fopen("inst_bin.txt","r");
	if(fp == NULL){
		exit(0);
	}
	int i=0;
	char tmp[100];
	unsigned long tmp_hex;
	while(fscanf(fp,"%lx %s",&tmp_hex,tmp) != EOF){
		if(tmp == "RDS_ADDR"){
			inst_buffer[i] = 9 + (17<<6) + (RDS_ADDR << 12);
		}
		else if(tmp == "RDT_ADDR"){
			inst_buffer[i] = 9 + (18<<6) + (RDT_ADDR << 12);
		}
		else{
			inst_buffer[i] = tmp_hex;
		}
		i++;
	}
}
*/

int foo(int b)
{
	int a;
	a = 1;
	a++;
	return a+b;
}

int main(void)
{
	printf("Begin test...\n");
	uint64_t instruction[256];

/* DFI  test
	uint64_t RDT[1024];
	uint64_t RDS[1024];
	for (i = 0; i < 1024; i++)
	{
		RDT[i] = 0;
    }	
	RDS[5] = (uint64_t)(32*8) + ((uint64_t)(32*8+2)<<32);
	RDS[9] = (uint64_t)(32*8) + ((uint64_t)(32*8+2)<<32);
	RDS[32] = 1;
	
	
	printf("RDS addr is%x...\n",RDS);
	printf("RDT addr is%x...\n",RDT);
	uint64_t RDT_ADDR = &RDT[0];
	uint64_t RDS_ADDR = &RDS[0];

	DFI_ALL(instruction,RDT_ADDR,RDS_ADDR);
	// for (i = 0; i < 33; i++)
	// {
	// 	printf("Insturct:   %lx\n",instruction[i]);
	// }
	//rocc_inst_gen(instruction,RDS_ADDR,RDT);
	//initial
	ROCC_INSTRUCTION_SS(0,instruction,128,0);
	// asm(".word 0x0000008b");

	int a11[1024]={0};
	int tmp;
//	asm(".word 0x0000008b"); //store addr a, id 1

	for (i = 0; i < 128; i++)
	{
		tmp = a11[(i*10)%1024];
		 if(i&0x1 == 1) 
		 asm(".word 0x0400028b"); // check id 1; store 
		 else 
		 asm(".word 0x0400048b");  
	}
	
*/


//CFI test a --------------->
	unsigned long CFG[1024];
	CFG_init(CFG);
	cfi_v1(instruction,CFG,CFG+0x200);
	//ROCC_INSTRUCTION_SS(0,instruction,128,0);
	//ROCC_INSTRUCTION_SS(0,instruction,0,1); //cfi start
	//ROCC_INSTRUCTION_SS(0,instruction,0,4); //cfi jalr do
	asm(".word 0x0200000b");
	asm(".word 0x0800000b");
	int tmp = 0;
	for (i = 0; i < 5; i++)
	{
		tmp ++;
	}
	
	for (size_t i = 0; i < 512*32; i++)
	{
		/* code */
	
	int x = foo(foo(foo(2)));
	int (*p)(int);
	p = foo;
	p(1);
	p(2);
	int y = p(p(p(5)));
	if(x>y){
		x = 0;
	}else{
		y=0;
	}
	for (size_t j = 0; j < 3; j++)
	{
		x+=j;
	}
	}
	//printf("x is %d,y is %d\n",x,y);

//CCFI test done <<<------------
	//ROCC_INSTRUCTION_SS(0,instruction,0,2); //cfi start
	asm(".word 0x0400000b");
	return 0;
}
